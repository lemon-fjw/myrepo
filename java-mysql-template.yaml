apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: tomcat8-mysql-s2i
metadata:
  name: tomcat8-mysql-s2i
  namespace: openshift
objects:

#定义前端组件服务对象
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ${APPLICATION_NAME}
      
#定义mysql组件服务对象
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${APPLICATION_NAME}-mysql
    name: ${APPLICATION_NAME}-mysql
  spec:
    ports:
    - port: 3306
      targetPort: 3306
    selector:
      deploymentConfig: ${APPLICATION_NAME}-mysql
      
#定义前端组件Route对象      
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${HOSTNAME_HTTP}.apps.ocp311.centos.local
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
      
#定义前端组件镜像ImageStream   
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    
#定义mysql组件镜像ImageStream（docker file in source）
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${APPLICATION_NAME}-mysql
    name: ${APPLICATION_NAME}-mysql
    
#定义tomcat s2i构建对象    
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        forcePull: true
        from:
          kind: ImageStreamTag
          name: tomcat-s2i:latest
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    #- github:
    #    secret: ${GITHUB_WEBHOOK_SECRET}
    #  type: GitHub
    #- generic:
    #    secret: ${GENERIC_WEBHOOK_SECRET}
    #  type: Generic
    - imageChange: {}  
    - type: ConfigChange
      type: ImageChange

#定义mysql的dockerfile in source构建对象
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}-mysql
    name: ${APPLICATION_NAME}-mysql
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-mysql:latest
    source:
      git:
        ref: ${MYSQL_REPOSITORY_REF}
        uri: ${MYSQL_REPOSITORY_URL}
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: mysql:5.7
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Docker
    triggers:
    #- github:
    #    secret: XNwyDEc8ymnDgfEHwoGJ
    #  type: GitHub
    #- generic:
    #    secret: Wmi1bBPlzoQxfZ120kJ-
    #  type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange

#定义tomcat组件deploymentconfig    
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      deploymentConfig: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_HOST
            value: ${APPLICATION_NAME}-mysql
          - name: MYSQL_PWD
            value: ${MYSQL_PWD}
          image: ${APPLICATION_NAME}:latest
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 5
        terminationGracePeriodSeconds: 60
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange

#定义mysql组件deploymentconfig       
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      deploymentConfig: ${APPLICATION_NAME}-mysql
    name: ${APPLICATION_NAME}-mysql
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}-mysql
          deploymentConfig: ${APPLICATION_NAME}-mysql
        name: ${APPLICATION_NAME}-mysql
      spec:
        containers:
        - env:
          - name: MYSQL_ROOT_PASSWORD
            value: ${MYSQL_PWD}
          image: ${APPLICATION_NAME}-mysql:latest
          name: ${APPLICATION_NAME}-mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
             port: 3306
          timeoutSeconds: 5
          #volumeMounts:
          #- mountPath: /var/lib/mysql
          #  name: ${APPLICATION_NAME}-mysql-pvol
        terminationGracePeriodSeconds: 60
        #volumes:
        #- name: ${APPLICATION_NAME}-mysql-pvol
        #  persistentVolumeClaim:
        #    claimName: ${APPLICATION_NAME}-mysql-claim
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-mysql
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-mysql:latest
      type: ImageChange
    - type: ConfigChange
#- apiVersion: v1
#  kind: PersistentVolumeClaim
#  metadata:
#    labels:
#      application: ${APPLICATION_NAME}
#    name: ${APPLICATION_NAME}-mysql-claim
#  spec:
#    accessModes:
#    - ReadWriteOnce
#    resources:
#      requests:
#        storage: ${VOLUME_CAPACITY}
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
- description: 'hostname for http service route. Leave blank for default hostname'
  displayName: Custom http Route Hostname
  name: HOSTNAME_HTTP
  required: true
  value: appname
- description: Git source URI for application
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: http://git.tsd.cloudtogo.local/fjw/java_source.git
- description: Git source URI for mysql
  displayName: Git Repository URL
  name: MYSQL_REPOSITORY_URL
  required: true
  value: http://git.tsd.cloudtogo.local/fjw/java_mysql.git
- description: Git branch for source code
  displayName: Git Source Code Reference
  name: SOURCE_REPOSITORY_REF
  value: master
- description: Git branch/tag mysql dockerfile
  displayName: Git Mysql Dockerfile Reference
  name: MYSQL_REPOSITORY_REF
  value: master
- description: Path within Git project to build,empty for root project directory
  displayName: Context Directory #git子项目路径，没有子项目就不填
  name: CONTEXT_DIR
- description: Database user password
  displayName: Database Password
  name: MYSQL_PWD
  required: true
- description: ImageStream Namespace
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
- description: Maven mirror to use for S2I builds
  displayName: Maven mirror URL
  name: MAVEN_MIRROR_URL
  value: https://maven.aliyun.com/repository/central
- description: The tag to use for the "mysql" image stream
  displayName: MySQL Image Stream Tag
  name: MYSQL_IMAGE_STREAM_TAG
  required: true
  value: "5.7"
